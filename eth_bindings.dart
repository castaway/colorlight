// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int socket_open(
    ffi.Pointer<ffi.Uint8> ifname,
  ) {
    return _socket_open(
      ifname,
    );
  }

  late final _socket_openPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint8>)>>(
          'socket_open');
  late final _socket_open =
      _socket_openPtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>)>();

  int socket_close(
    int arg0,
  ) {
    return _socket_close(
      arg0,
    );
  }

  late final _socket_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'socket_close');
  late final _socket_close = _socket_closePtr.asFunction<int Function(int)>();

  int get_mac_addr() {
    return _get_mac_addr();
  }

  late final _get_mac_addrPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>('get_mac_addr');
  late final _get_mac_addr = _get_mac_addrPtr.asFunction<int Function()>();

  int socket_send(
    int sockfd,
    int src_mac,
    int dest_mac,
    int ether_type,
    ffi.Pointer<ffi.Uint8> data,
    int len,
    int flags,
  ) {
    return _socket_send(
      sockfd,
      src_mac,
      dest_mac,
      ether_type,
      data,
      len,
      flags,
    );
  }

  late final _socket_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Uint64, ffi.Uint64, ffi.Uint32,
              ffi.Pointer<ffi.Uint8>, ffi.Int32, ffi.Uint32)>>('socket_send');
  late final _socket_send = _socket_sendPtr.asFunction<
      int Function(int, int, int, int, ffi.Pointer<ffi.Uint8>, int, int)>();
}
